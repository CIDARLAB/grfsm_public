import searchGRFSM as sGRFSM
import circuitRank as cr
import unittest

class searchGRFSMTest(unittest.TestCase):
	def test_figure6A(self):
		expectedResult = [
			[5,    5,    5,    5,    3,    1,  -14],
			[14,  -1,    5,    5,   -3,    5,    5],
			[ 5,   5,    5,  -15,   14,    1,  -14],
			[-1,   5,    5,  -14,   -7,   -7,  -14],
			[5,   -7,   -7,  -15,   14,    1,  -14],
			[5,    5,  -10,    3,    5,    1,  -14],
			[5,    5,    5,   10,   -7,    1,  -14],
			[14,  -1,    5,  -10,    7,    5,    5],
			[-1,  10,    5,  -14,   -7,    5,    5],
			[5,    5,   -7,   10,    3,    1,  -14],
			[5,    5,  -10,   14,   -7,    1,  -14],
			[5,    5,  -10,    6,   -7,    1,  -14],
			[5,  -10,   -7,  -15,   14,    1,  -14],
			[5,   -7,  -10,  -15,   14,    1,  -14],
			[14, -11,    5,  -10,   -3,    5,    5],
			[14,  -1,   10,  -10,   15,    5,    5],
			[5 , -10,    5,  -10,    3,    1,  -14],
			[ 5, -10,  -10,  -15,   14,    1,  -14],
			[14, -11,   10,  -10,    4,    5,    5]
		]

		##Input strucutred as [[state1], [state2], [state3], [state4], [state5]]
		inputFor6A = [[1],[0],[1],[1],[0]]

		searchResult = sGRFSM.searchGRFSM(inputFor6A)
		rankedSearchResult = cr.rankCircuits(searchResult)

		self.assertEqual(rankedSearchResult, expectedResult)

	def test_figure6E(self):
		expectedResult = [
			[14, -1, -2, 19, 5, 5, 5],
			[-1, 14, 2, 5, 19, 5, 5],
			[14, -1, -2, 5, 19, 5, 5],
			[-1, 14, 2, 19, 5, 5, 5],
			[-1, -1, 6, 19, 15, 5, 5],
			[-1, -1, 6, 15, 19, 5, 5],
			[14, 14, 8, -15, 19, 5, 5],
			[-1, 14, 2, -1, 5, 5, -14],
			[14, 14, 8, 19, -15, 5, 5],
			[14, 6, 8, 19, -15, 5, 5],
			[-1, 14, 2, -18, -15, 5, 5],
			[14, -1, -2, -15, -18, 5, 5],
			[14, -1, -2, 15, 18, 5, 5],
			[14, 6, 8, -15, 19, 5, 5],
			[14, -2, -2, -7, 19, 5, 5],
			[-1, 14, 2, 19, -7, 5, -14],
			[-1, 14, 2, 18, 5, -7, -14],
			[-1, -1, 6, 19, 15, -7, -14],
			[-1, -1, 6, 15, -18, -7, -14],
			[-1, 14, 2, 19, -7, -7, 5],
			[14, -1, -11, 1, 5, 5, 5],
			[9, 5, 2, 5, -1, 5, -14],
			[-1, 3, 11, 5, 1, 5, 5],
			[9, 5, 2, 5, 19, 5, -14],
			[-1, 3, 11, 5, 19, 5, 5],
			[-1, 14, 2, 5, -1, -10, 5],
			[14, 5, -2, 19, 5, 10, 1],
			[14, -1, -11, 19, -15, 5, 5],
			[-1, 3, 11, 19, 15, 5, 5],
			[9, 5, 2, 19, -15, 5, -14],
			[14, -1, -11, 4, 19, 5, 5],
			[14, 5, -2, 5, 19, 10, 1],
			[14, 9, -2, -15, 19, 5, 5],
			[14, 9, -2, -1, -14, 5, 5],
			[14, 14, -12, 3, 1, 5, 5],
			[14, 14, 12, 1, 3, 5, 5],
			[14, 5, -11, 1, 14, 5, 1],
			[9, 14, 2, 19, -15, 5, 5],
			[14, -1, -11, 19, -14, 5, 5],
			[14, -11, -2, 19, -15, 5, 5],
			[14, 5, -11, 19, 14, 5, 1],
			[14, 5, -11, 15, 18, 5, 1],
			[14, 9, -2, 4, 18, 5, 5],
			[14, 6, -12, 3, 1, 5, 5],
			[14, 6, 12, 1, 3, 5, 5],
			[14, 5, -11, 1, 6, 5, 1],
			[-1, 9, 6, -18, 4, 5, 5],
			[14, -11, -2, 19, -14, 5, 5],
			[14, 5, -11, 19, 6, 5, 1],
			[-1, 14, 2, 15, 19, -10, 5],
			[-1, 14, 2, 19, -15, -10, 5],
			[-1, -1, 6, 4, -18, -10, 5],
			[14, 5, -2, -15, -18, 10, 1],
			[-1, -1, 6, -18, 4, -10, 5],
			[-1, -1, 6, -3, -18, -10, 5],
			[9, -1, 6, 4, -18, 5, -14],
			[-1, -1, 6, -18, -3, -10, 5],
			[9, -1, 6, -18, 4, 5, -14],
			[-1, 3, 11, 18, 15, 5, -14],
			[9, -1, 6, -3, -18, 5, -14],
			[9, -1, 6, -18, -3, 5, -14],
			[-1, -1, 6, 19, 15, -10, -14],
			[-1, 14, 2, 18, -15, -10, -14],
			[9, 5, 2, 19, 5, -7, -14],
			[14, 10, 8, 3, -7, 5, 1],
			[-1, 14, 2, -7, 19, -10, 5],
			[9, -7, 2, 15, 19, 5, -14],
			[-1, 3, 11, -1, 7, 5, -14],
			[-1, 9, 6, -1, 7, 5, -14],
			[9, 5, 2, -18, -15, -7, -14],
			[9, -7, 2, 7, -1, 5, -14],
			[9, -7, 2, -7, 19, 5, -14],
			[-1, 3, 11, -7, 1, -7, -14],
			[-1, 3, 11, -7, 19, -7, -14],
			[9, -7, 2, 14, 19, -7, -14],
			[9, -7, 2, 19, -7, -7, -14],
			[5, 5, 5, -1, -14, 11, -9],
			[5, 5, 5, 19, -14, 11, -9],
			[5, 5, 5, 15, -18, 11, -9],
			[5, 5, -9, -18, 5, 14, -9],
			[14, -11, -11, 19, 5, 5, 5],
			[-1, 9, -10, -1, -3, 5, 5],
			[-1, 9, -10, 19, -3, 5, 5],
			[-1, 9, -10, 15, -18, 5, 5],
			[5, 10, -9, 5, 18, 15, 1],
			[14, 5, -11, 1, 5, 10, 1],
			[5, 5, -10, -1, -3, 2, -9],
			[-1, 3, 11, 5, -1, -10, 5],
			[5, 5, -10, 19, -3, 2, -9],
			[5, 5, -10, 15, -18, 2, -9],
			[14, 5, -9, 5, 18, 15, -9],
			[14, -11, -11, -1, -3, 5, 5],
			[14, -11, -11, -1, 6, 5, 5],
			[-1, -1, 10, -3, -1, -10, 5],
			[-1, -1, 10, -3, 19, -10, 5],
			[9, -1, 10, -3, -1, 5, -14],
			[-1, -1, 10, -18, 15, -10, 5],
			[14, 5, -11, 19, -15, 10, 1],
			[9, 5, 2, 15, 19, -10, -14],
			[-1, 3, 11, 15, 19, -10, 5],
			[9, -1, 10, -3, 19, 5, -14],
			[14, 5, -11, 4, 19, 10, 1],
			[-1, 3, 11, 5, 1, -10, -14],
			[9, -1, 10, -18, 15, 5, -14],
			[14, 5, -11, 19, -14, 10, 1],
			[-1, 3, 11, 5, 19, -10, -14],
			[14, 10, -11, 4, 18, 5, 1],
			[-1, 9, 6, -2, -3, -10, 5],
			[14, 10, -11, -1, 6, 5, 1],
			[9, 9, 6, -2, -3, 5, -14],
			[14, 10, -2, -15, 19, 10, 1],
			[14, 10, -2, -1, -14, 10, 1],
			[-1, -1, 10, -3, -2, -10, -14],
			[14, 10, -2, 4, 18, 10, 1],
			[5, 5, 5, 7, -2, 11, -9],
			[5, 5, 5, -2, 7, 11, -9],
			[5, 5, 5, -18, 7, 11, -9],
			[-1, 9, 5, 7, -2, -10, 5],
			[-1, 9, 5, -2, 7, -10, 5],
			[-1, 9, 5, 7, -18, -10, 5],
			[9, 9, 5, 7, -2, 5, -14],
			[9, -7, 11, 5, 1, 5, -14],
			[14, 14, 13, -7, 1, 5, 5],
			[14, 14, 13, 1, -7, 5, 5],
			[9, 9, 5, -2, 7, 5, -14],
			[-1, 9, -10, -18, 7, 5, 5],
			[-1, 9, 5, -18, 7, -10, 5],
			[9, 9, 5, 7, -18, 5, -14],
			[14, 6, 13, -7, 1, 5, 5],
			[14, 6, 13, 1, -7, 5, 5],
			[5, 5, -10, -18, 7, 2, -9],
			[9, 9, 5, -18, 7, 5, -14],
			[-1, -1, 10, 7, -18, -10, 5],
			[-1, 9, -10, -2, 7, 5, -14],
			[-1, 9, 6, 7, -1, -10, 5],
			[9, -7, 2, 5, -1, -10, -14],
			[9, -7, 2, -10, -1, 5, -14],
			[-1, 9, 6, -1, 7, -10, 5],
			[9, -1, 10, 7, -18, 5, -14],
			[9, -7, 2, 5, 19, -10, -14],
			[9, 5, 2, -7, 19, -10, -14],
			[9, -7, 11, 4, 19, 5, -14],
			[9, -7, 2, -10, 19, 5, -14],
			[9, -7, 11, -3, -1, 5, -14],
			[9, 9, 6, 7, -1, 5, -14],
			[9, -7, 11, -3, 19, 5, -14],
			[9, -7, 11, 3, 19, 5, -14],
			[14, -11, -11, -1, -14, 7, 5],
			[9, -7, 11, 6, -1, 5, -14],
			[9, -7, 11, 6, 19, 5, -14],
			[14, 10, -9, -7, 18, 15, 1],
			[5, 5, -9, -2, 5, 10, -9],
			[5, 5, 11, -2, 10, 5, -9],
			[5, 5, 11, -9, 5, 14, -9],
			[5, 5, 11, -18, 10, 5, -9],
			[5, 10, -9, 5, 9, -3, 1],
			[9, 5, 2, -10, -1, -10, -14],
			[14, -11, -11, -1, -14, 10, 5],
			[14, 10, -9, -10, 18, 15, 1],
			[14, 5, -9, 5, 9, 7, -9],
			[5, 10, -9, -7, 18, 15, -9],
			[9, -7, 11, -7, 1, -10, -14],
			[5, 5, 11, -9, 10, 5, -9],
			[5, 10, -9, -10, 18, 15, -9],
			[14, 10, -9, -10, 9, -3, 1],
			[5, 10, -9, -10, 9, -3, -9],
		]
		##Input strucutred as [[state1], [state2], [state3], [state4], [state5]]
		inputFor6E = [[1, 0, 1],[1, 0, 0],[0, 0, 1],[1, 1, 0],[0, 1, 1]]

		##What input currrently is...
		testin = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0]]

		searchResult = sGRFSM.searchGRFSM(testin)
		searchResult2 = sGRFSM.searchGRFSM(inputFor6E)
		rankedSearchResult = cr.rankCircuits(searchResult)
		rankedSearchResult2 = cr.rankCircuits(searchResult2)

		self.assertEqual(rankedSearchResult, expectedResult)
		self.assertEqual(rankedSearchResult2, expectedResult)


if __name__ == '__main__':
    unittest.main()
